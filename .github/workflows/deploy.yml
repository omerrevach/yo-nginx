name: Terraform CI/CD

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main

jobs:
  secrets-scan:
    name: Gitleaks Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: "--report-format sarif --report-path=gitleaks.sarif"
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.sarif

  docker-scan:
    name: Trivy Dockerfile Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - name: Run Trivy and Save Report
        run: trivy config . --format sarif --output trivy-results.sarif || true
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-results.sarif

  checkov:
    name: Checkov Terraform Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Checkov
        run: pip install checkov
      - name: Run Checkov and Save Report
        run: checkov -d ./tf --output sarif > checkov-results.sarif || true
      - name: Upload Checkov Report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-results.sarif

  terraform:
    name: Terraform Apply with ECR Push
    needs: [secrets-scan, docker-scan, checkov]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Apply S3 State Bucket
        working-directory: s3_state
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Create tfvars file
        working-directory: tf
        run: |
          cat > terraform.auto.tfvars <<EOF
          vpc_name = "${{ secrets.TF_VAR_vpc_name }}"
          cidr = "${{ secrets.TF_VAR_cidr }}"
          azs = ["eu-north-1a", "eu-north-1b"]
          public_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
          private_subnets = ["10.0.11.0/24", "10.0.12.0/24"]
          enable_nat_gateway = ${{ secrets.TF_VAR_enable_nat_gateway }}
          single_nat_gateway = ${{ secrets.TF_VAR_single_nat_gateway }}
          one_nat_gateway_per_az = ${{ secrets.TF_VAR_one_nat_gateway_per_az }}
          environment = "${{ secrets.TF_VAR_environment }}"
          linux_ami = "${{ secrets.TF_VAR_linux_ami }}"
          instance_type = "${{ secrets.TF_VAR_instance_type }}"
          hosted_zone_id = "${{ secrets.TF_VAR_hosted_zone_id }}"
          domain_name = "${{ secrets.TF_VAR_domain_name }}"
          region = "${{ secrets.TF_VAR_region }}"
          EOF

      - name: Terraform Format Check
        working-directory: tf
        run: terraform fmt -check -recursive || true

      - name: Terraform Init
        working-directory: tf
        run: terraform init

      - name: Terraform Validate
        working-directory: tf
        run: terraform validate

      # Apply only ECR
      - name: Terraform Apply Phase 1 - ECR Module Only
        working-directory: tf
        run: terraform apply -auto-approve -target=module.ecr

      # Build + push Docker image to ECR
      - name: Docker Build and Push to ECR
        run: |
          IMAGE_REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nginx-assignment"

          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_REPO

          docker build -t nginx-assignment ./docker
          docker tag nginx-assignment:latest $IMAGE_REPO:latest
          docker push $IMAGE_REPO:latest

      # Apply the full infra
      - name: Terraform Apply Phase 2 - Full Infra
        working-directory: tf
        run: terraform apply -auto-approve

      - name: Clean up sensitive files
        if: always()
        working-directory: tf
        run: rm -f terraform.auto.tfvars
